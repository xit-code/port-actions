name: Scaffold via Maven Archetype

on:
  workflow_dispatch:
    inputs:
      service_name:
        required: true
        description: The name of the new service
        type: string
      # Archetype coordinates
      archetypeGroupId:
        description: "Archetype GroupId"
        required: true
        default: "pe.interbank.ads"
      archetypeArtifactId:
        description: "Archetype ArtifactId"
        required: true
        default: "ads-microservice-archetype-java"
      archetypeVersion:
        description: "Archetype Version"
        required: true
        default: "1.2.3"
      port_context:
        required: true
        description: Includes the action's run id
        type: string

      # Project options (turned into -Dkey=value)
      system_id:
        required: true
        description: application id
        default: "mdp"
      version:
        required: true
        description: application id
        default: "1.0.0"
      java_version:
        required: true
        description: application id
        default: "17"
      owner:
        required: true
        description: application id
        default: "platform-devsecops"

permissions:
  contents: write
  pull-requests: write

jobs:
  scaffold:
    runs-on: ubuntu-latest
    env:
      ORG_NAME: xit-code
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Checkout (only needed when using local actions)
        uses: actions/checkout@v4

      # NEW: compose <system_id>-<service_name>-service (lowercase, kebab-case, max 100 chars)
      - name: Compose repository name
        id: repo_name
        shell: bash
        run: |
          set -euo pipefail
          sys='${{ inputs.system_id }}'
          svc='${{ inputs.service_name }}'
          name="${sys}-${svc}-service"
          # lowercase + sanitize to [a-z0-9-], collapse repeats, trim edges
          name="$(echo "$name" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9-]+/-/g; s/^-+//; s/-+$//; s/-{2,}/-/g')"
          # limit to 100 chars (GitHub repo name limit)
          name="${name:0:100}"
          echo "value=$name" >> "$GITHUB_OUTPUT"

      - name: Set up JDK 17 (for Maven)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'


      - name: Install Maven
        run: |
          sudo apt-get update -y
          sudo apt-get install -y maven
          mvn -v
      
      - name: Configure Maven settings.xml from template
        env:
          ARTIFACTORY_HOST: ${{ secrets.ARTIFACTORY_HOST }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASS }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.m2"
          sed -e "s|{ARTIFACTORY_HOST}|${ARTIFACTORY_HOST}|g" \
          -e "s|{ARTIFACTORY_USERNAME}|${ARTIFACTORY_USERNAME}|g" \
          -e "s|{ARTIFACTORY_PASSWORD}|${ARTIFACTORY_PASSWORD}|g" \
          .github/config-files/settings.xml.tpl > "$HOME/.m2/settings.xml"
          echo "Maven settings written to $HOME/.m2/settings.xml"
      
      - name: Download codeibk release (binary + checksum)
        env:
          TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p bin
          curl -fsSL -H "Authorization: token ${TOKEN}" \
          -o bin/codeibk \
          "https://github.com/xit-code/orchestrator/releases/download/${{ env.CODEIBK_VERSION }}/codeibk"
          curl -fsSL -H "Authorization: token ${TOKEN}" \
          -o bin/codeibk_linux_amd64.sha256 \
          "https://github.com/xit-code/orchestrator/releases/download/${{ env.CODEIBK_VERSION }}/codeibk_linux_amd64.sha256"
          chmod +x bin/codeibk

      - name: Verify codeibk checksum
        run: |
          cd bin
          sha256sum --check codeibk_linux_amd64.sha256
      - name: Add codeibk to PATH
        run: echo "$PWD/bin" >> "$GITHUB_PATH"
      
      - name: Scaffold via codeibk (java-microservice)
        env:
          CODEIBK_GITHUB_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          codeibk component create \
          --preset java-microservice \
          --org "${{ env.ORG_NAME }}" \
          --team "${{ inputs.system_id }}" \
          --application "${{ inputs.system_id }}" \
          --service "${{ inputs.service_name }}" \
          --service-owner "${{ inputs.owner }}" \
          --service-title "${{ inputs.system_id }} ${{ inputs.service_name }} Service" \
          --service-description "xddddd"

      - name: Run mvn-archetype action (local)
        uses: ./.github/actions/mvn-archetype
        with:
          # GitHub / repo
          token: ${{ secrets.ORG_ADMIN_TOKEN }}
          githubUrl: https://api.github.com
          organizationName: ${{ env.ORG_NAME }}
          repositoryName: ${{ steps.repo_name.outputs.value }}
          githubTeamName: ${{ inputs.system_id }}

          # Port (optional)
          portClientId: ${{ secrets.PORT_CLIENT_ID }}
          portClientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          portRunId: ${{ fromJson(inputs.port_context).runId }}
          blueprintIdentifier: githubRepository
          createPortEntity: "false"

          # Artifactory / settings
          artifactoryUsername: ${{ secrets.ARTIFACTORY_USER }}
          artifactoryPassword: ${{ secrets.ARTIFACTORY_PASS }}
          artifactoryHost: ${{ secrets.ARTIFACTORY_HOST }}
          settingsTemplatePath: .github/config-files/settings.xml.tpl

          # Archetype coords
          archetypeGroupId: ${{ inputs.archetypeGroupId }}
          archetypeArtifactId: ${{ inputs.archetypeArtifactId }}
          archetypeVersion: ${{ inputs.archetypeVersion }}

          # Flexible options â†’ become -Dkey=value
          mavenOptionsJson: >-
            {
              "groupId": "pe.interbank",
              "application": "${{ inputs.system_id }}",
              "service": "${{ inputs.service_name }}",
              "version": "${{ inputs.version }}",
              "javaVersion": "${{ inputs.java_version }}",
              "serviceOwner": "${{ inputs.owner }}",
              "serviceTitle": "${{ inputs.system_id }} ${{ inputs.service_name }} Service",
              "serviceDescription": "xddddd",
              "serviceRepository": "${{ inputs.system_id }}-${{ inputs.service_name }}-service",
              "requiresDatabase": "no",
              "requiresMessaging": "no",
              "requiresService": "no",
              "requiresStorage": "no"
            }

          # Extra mvn flags if you need them
          mavenExtraArgs: ""

      - name: Create Service in Port with Repository Relation
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: "${{ steps.repo_name.outputs.value }}"
          title: "${{ inputs.system_id }} ${{ inputs.service_name }} Service"
          team: '["${{ inputs.system_id }}"]'
          blueprint: "service"
          relations: |
            {
              "repository": "${{ env.ORG_NAME }}/${{ steps.repo_name.outputs.value }}"
            }

      - name: Create a log message
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "Finished scaffolding of service and repository: ${{ inputs.service_name }}"
